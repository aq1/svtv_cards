from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup

from DBworker import DB
from config import bot, db as DB, dp, msk
from crypto_helper import convert_from_usd, check_transaction
from states import State_SVTV

DB = DB()

auth_button = InlineKeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Patreon", url='telegra.ph')

donate = KeyboardButton("üíµ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç")
buy_sub = KeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
# login_in_patreon = KeyboardButton("üö™ –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Patreon")
join_to_chat = KeyboardButton("üîê –í–æ–π—Ç–∏ –≤ —á–∞—Ç")

main_menu_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_keyboard.add(donate, buy_sub).add(join_to_chat)


def login_chat(user_id):
    client_id = 1
    redirect_uri = "hufsy"
    print(user_id)
    login_menu = InlineKeyboardMarkup()
    login_in_patreon = InlineKeyboardButton("–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Patreon",
                                            url=f"https://www.patreon.com/oauth2/authorize?response_type=code&client_id={client_id}" \
                                                f"&redirect_uri={redirect_uri}&state={user_id}" \
                                                f"&scope=users+pledges-to-me")
    login_in_bot = InlineKeyboardButton("–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –ø–æ–¥–ø–∏—Å–∫—É –±–æ—Ç–∞", callback_data='login_in_bot')
    login_menu.add(login_in_patreon).add(login_in_bot)
    return login_menu


def donate_bot():
    donate_menu = InlineKeyboardMarkup()
    yu_kassa = InlineKeyboardButton("üá∑üá∫ –ÆKassa", url='telegra.ph')
    smart_glocal = InlineKeyboardButton("Smart Glo—Åal", url='telegra.ph')
    crypts = InlineKeyboardButton("–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ", callback_data='crypts')
    donate_menu.add(yu_kassa).add(smart_glocal).add(crypts)
    return donate_menu


def donate_crypto():
    donate_crypto_menu = InlineKeyboardMarkup()
    donate_with_comm = InlineKeyboardButton("–î–æ–Ω–∞—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º", callback_data='donate_with_comm')
    donate_without_comm = InlineKeyboardButton("–û–±—ã—á–Ω—ã–π –¥–æ–Ω–∞—Ç", callback_data='donate_without_comm')
    donate_crypto_menu.add(donate_without_comm).row(donate_with_comm)
    return donate_crypto_menu


def crypto_menu():
    crypto_inline_menu = InlineKeyboardMarkup()
    v_btc = InlineKeyboardButton("BTC", callback_data='v_btc')
    # v_eth = InlineKeyboardButton("ETH", callback_data='v_eth')
    crypto_inline_menu.add(v_btc)
    return crypto_inline_menu


def crypto_sub_menu(lvl, sub):
    crypto_inline_sub_menu = InlineKeyboardMarkup()
    vs_btc = InlineKeyboardButton("BTC", callback_data=f'vs_btc-{lvl}-{sub}')
    # v_eth = InlineKeyboardButton("ETH", callback_data='v_eth')
    crypto_inline_sub_menu.add(vs_btc)
    return crypto_inline_sub_menu


def accept_pay(summ, currency):
    accept_pay_menu = InlineKeyboardMarkup()
    yes_apm = InlineKeyboardButton("–î–∞", callback_data=f'yes_apm-{summ}-{currency}')
    no_apm = InlineKeyboardButton("–ù–µ—Ç", callback_data=f'no_apm-{summ}-{currency}')
    accept_pay_menu.add(yes_apm).row(no_apm)
    return accept_pay_menu


def accept_sub(lvl, dat, currency):
    accept_sub_menu = InlineKeyboardMarkup()
    yes_asm = InlineKeyboardButton("–î–∞", callback_data=f'yes_asm-{lvl}-{dat}-{currency}')
    no_asm = InlineKeyboardButton("–ù–µ—Ç", callback_data=f'no_asm-{lvl}-{dat}-{currency}')
    accept_sub_menu.add(yes_asm).row(no_asm)
    return accept_sub_menu


def sub_menu():
    sub_inlinemenu = InlineKeyboardMarkup()
    reader = InlineKeyboardButton("–ß–∏—Ç–∞—Ç–µ–ª—å: 20$ –≤ –º–µ—Å—è—Ü", callback_data=f'reader')
    reg_reader = InlineKeyboardButton("–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —á–∏—Ç–∞—Ç–µ–ª—å: 50$ –≤ –º–µ—Å—è—Ü", callback_data='reg_reader')
    sponsor = InlineKeyboardButton("–°–ø–æ–Ω—Å–æ—Ä: 250$ –≤ –º–µ—Å—è—Ü", callback_data='sponsor')
    sub_inlinemenu.add(reader).row(reg_reader).row(sponsor)
    return sub_inlinemenu


def sub_period(lvl):
    sub_period_menu = InlineKeyboardMarkup()
    one_month = InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data=f'one_month-{lvl}')
    three_month = InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞", callback_data=f'three_month-{lvl}')
    six_month = InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤", callback_data=f'six_month-{lvl}')
    twelve_month = InlineKeyboardButton("12 –º–µ—Å—è—Ü–µ–≤", callback_data=f'twelve_month-{lvl}')
    back_sub = InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data='back_sub')
    sub_period_menu.add(one_month).row(three_month).row(six_month).row(twelve_month).row(back_sub)
    return sub_period_menu


@dp.callback_query_handler(lambda c: True, state='*')
async def inline_handler(call: types.CallbackQuery, state: FSMContext):
    if call.data == 'crypts':
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –¥–æ–Ω–∞—Ç–∞.\n\n–î–æ–Ω–∞—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –ø–æ–∑–≤–æ–ª—è–µ—Ç –í–∞–º –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ —ç—Ñ–∏—Ä <a href='https://www.youtube.com/c/SVTVofficial'>–∫–∞–Ω–∞–ª–∞ SVTV</a>.\n\n–û–±—ã—á–Ω—ã–π –¥–æ–Ω–∞—Ç " \
                                         f"–ø–æ–∑–≤–æ–ª—è–µ—Ç –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ª–∏–±–µ—Ä—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–µ –°–ú–ò ‚Äî <a href='https://t.me/svtvnews'>SVTV NEWS</a>.",
                                    parse_mode='HTML', disable_web_page_preview=True, reply_markup=donate_crypto())
    elif call.data == 'donate_without_comm':
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–æ–≤:\n\n<strong>Bitcoin (BTC):</strong>\n<code>1EahjiPKXyAFRbTC9HYL67TMQjZZgfFw9g</code>\n" \
                                         f"<strong>Litecoin (LTC):</strong>\n<code>LTwfHhGa7bQfXhPY7hn7Y1ajhcGMrpcD2N</code>\n" \
                                         f"<strong>Bitcoin Cash (BCH):</strong>\n<code>qzk27dg92j6hfftx7hfa6jyyy60ylsutdg2hgz28na</code>\n" \
                                         f"<strong>DASH:</strong>\n<code>XtqFqLi8VJV7eJ1s98MLbNmSNdZ81vbNVt</code>\n" \
                                         f"<strong>Ethereum (ETH):</strong>\n<code>0x19330e83c2059Ad5B67b8431dd6ba4BD848dec67</code>\n" \
                                         f"<strong>TON:</strong>\n<code>EQCWz0h6Q63UdJFcMUnwrgLM8D6cYOutxISn4NGDnqyrQUq8</code>\n" \
                                         f"<strong>NEO:</strong>\n<code>AdvX9JeJepvesyKyte7bSiPf6BrgENwRHD</code>\n" \
                                         f"<strong>Zcash (ZEC):</strong>\n<code>t1WuCvNNDsRNWaR4rrRjFia2N7SfpPoQYsu</code>\n" \
                                         f"<strong>Monero (XMR):</strong>\n<code>48ruTzXESqg6dBesQpHvJXHeAYVobsDhKa8m4CMgvtBdHTa3mWCFgD7WXpwMXt8TbBSLaN8J1PWtbZNu8WzSxvTiDGMpu8X</code>\n" \
                                         f"<strong>Doge:</strong>\n<code>DFvtMQKNrjWw6xDhD23Pr1cYZTWpPQ7bUo</code>",
                                    parse_mode='HTML')
    elif call.data == 'donate_with_comm':
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f"–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å.",
                                    reply_markup=crypto_menu())
    elif call.data == 'v_btc':
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ –≤ $.\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ ‚Äî 0.70$\n–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é ‚Äî <code>/cancel</code> ",
                                    parse_mode='HTML')
        await state.update_data(id_user=call.from_user.id, currency='BTC')
        await State_SVTV.summ_donate.set()
    elif call.data.split('-')[0] == 'yes_apm':
        try:
            user_state = await dp.storage.get_data(chat=call.from_user.id, user=call.from_user.id)
            if user_state:
                comm = user_state["comment"]
            else:
                comm = ''
            await call.message.delete_reply_markup()
            summ = call.data.split('-')[1]
            currency = call.data.split('-')[2]
            converted_amount = convert_from_usd(float(summ), currency)
            print(currency)
            DB_data = DB.selectDB_wallets(info=(0, currency))
            print(DB_data[0][1])
            DB_data2 = DB.selectDB_check_wallets(info=(call.from_user.id,))
            if DB_data2 != []:
                await bot.send_message(call.message.chat.id, f"–í—ã —É–∂–µ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –ø–ª–∞—Ç—ë–∂!")
                return
            DB.updateDB_wallets(info=(1, call.from_user.id, DB_data[0][1]))
            await bot.send_message(call.message.chat.id,
                                   f"<strong>{datetime.strftime(datetime.now(msk), '%d.%m.%Y %H:%M')}</strong>\n\n" \
                                   f"<a href='tg://user?id={call.from_user.id}'>{call.from_user.first_name}</a>" \
                                   f", –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <code>{converted_amount}</code> {currency} –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π BTC-–∞–¥—Ä–µ—Å:\n\n<code>{DB_data[0][1]}</code>" \
                                   f"\n\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å—Ç—É–ø–∞—é—Ç –≤ —Å–µ—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã —É–≤–∏–¥–∏–º, —á—Ç–æ –í–∞—à –ø–ª–∞—Ç—ë–∂ –¥–æ—à—ë–ª ‚Äî –º—ã —Å—Ä–∞–∑—É –∂–µ –æ—Ç–ø—Ä–∞–≤–∏–º –í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                                   parse_mode='HTML')
            dp.loop.create_task(
                check_transaction(DB_data[0][1], call.from_user.id, converted_amount, currency, comment=comm))
        except Exception as e:
            print(e)
            if str(e) == 'list index out of range':
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                            text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∂–µ–ª–∞—é—â–∏—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
    elif call.data.split('-')[0] == 'no_apm':
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f"–ù–µ—Ç —Ç–∞–∫ –Ω–µ—Ç!. –ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω.")
    elif call.data == 'reader':
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f"<strong>–î–æ–±–∞–≤–∏–º –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç —Ä–µ–¥–∞–∫—Ü–∏–∏.</strong>\n–°–º–æ–∂–µ—Ç–µ –ª–∏—á–Ω–æ —Å–∫–∞–∑–∞—Ç—å –°–ú–ú—â–∏–∫—É, —á—Ç–æ –µ–≥–æ —à—É—Ç–∫–∏ –Ω–µ—Å–º–µ—à–Ω—ã–µ!\n\n–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É:\n\n1. " \
                                         f"–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –æ—Ç –Ω–∞—Å\n2. –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –≤ Telegram\n\n–í—ã–±–µ—Ä–µ—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:",
                                    reply_markup=sub_period(1))
    elif call.data == 'reg_reader':
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text="<strong>–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –≤—ã—à–ª–∏ –≤ —Å–≤–µ—Ç.</strong>\n\n¬´–¢–µ—Å—Ç—ã¬ª, ¬´–¢—Ä–µ–¥—ã¬ª, ¬´–ú–Ω–µ–Ω–∏—è¬ª ‚Äî –≤—Å—ë —ç—Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏ –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞–Ω—å—à–µ –¥—Ä—É–≥–∏—Ö.\n" \
                                         f"–û—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–∏–ª–∞–≥–∞–µ—Ç—Å—è!\n\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ:\n\n1. –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –æ—Ç –Ω–∞—Å;\n2. –†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø + –û—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç;\n3. –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –≤ Telegram." \
                                         f"\n\n–í—ã–±–µ—Ä–µ—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=sub_period(2))
    elif call.data == 'sponsor':
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text="<strong>–°–¥–µ–ª–∞–µ–º ¬´–¢–µ—Å—Ç¬ª –ø–æ –í–∞—à–µ–π —Ç–µ–º–µ!</strong>\n\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ:\n\n1. –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –æ—Ç –Ω–∞—Å;\n2. –†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø + –û—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç;\n3. –ü–æ—Å—Ç –ø–æ –≤–∞—à–µ–π —Ç–µ–º–µ;\n4. ¬´–¢–µ—Å—Ç¬ª –ø–æ –í–∞—à–µ–π —Ç–µ–º–µ;"
                                         f"\n5. –ó–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –≤ Telegram." \
                                         f"\n\n–í—ã–±–µ—Ä–µ—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=sub_period(3))
    elif call.data == 'back_sub':
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=sub_menu())
    elif call.data.split('-')[0] == 'vs_btc':
        lvl = call.data.split('-')[1]
        dat = call.data.split('-')[2]
        if lvl == '1':
            name_sub = '¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª'
            summ = 20
        elif lvl == '2':
            name_sub = '¬´–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —á–∏—Ç–∞—Ç–µ–ª—å¬ª'
            summ = 50
        elif lvl == '3':
            name_sub = '¬´–°–ø–æ–Ω—Å–æ—Ä¬ª'
            summ = 250
        if dat == '1':
            dat_text = '1 –º–µ—Å—è—Ü'
        elif dat == '3':
            dat_text = '3 –º–µ—Å—è—Ü–∞'
        elif dat == '6':
            dat_text = '6 –º–µ—Å—è—Ü–µ–≤'
        elif dat == '12':
            dat_text = '12 –º–µ—Å—è—Ü–µ–≤'
        converted_amount = convert_from_usd(summ, 'BTC')
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É {name_sub} –Ω–∞ {dat_text} –∑–∞ <strong>{summ}$ ({converted_amount} BTC)?</strong>",
                                    reply_markup=accept_sub(lvl, dat, 'BTC'),
                                    parse_mode='HTML')
    elif call.data.split('-')[0] == 'one_month':
        lvl = call.data.split('-')[1]
        dat = 1
        print(lvl)
        if lvl == '1':
            name_sub = '¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª'
        elif lvl == '2':
            name_sub = '¬´–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —á–∏—Ç–∞—Ç–µ–ª—å¬ª'
        elif lvl == '3':
            name_sub = '¬´–°–ø–æ–Ω—Å–æ—Ä¬ª'
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f"–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ {name_sub} –Ω–∞ 1 –º–µ—Å—è—Ü.",
                                    reply_markup=crypto_sub_menu(lvl, dat))
    elif call.data.split('-')[0] == 'three_month':
        lvl = call.data.split('-')[1]
        dat = 3
        print(lvl)
        if lvl == '1':
            name_sub = '¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª'
        elif lvl == '2':
            name_sub = '¬´–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —á–∏—Ç–∞—Ç–µ–ª—å¬ª'
        elif lvl == '3':
            name_sub = '¬´–°–ø–æ–Ω—Å–æ—Ä¬ª'
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f"–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ {name_sub} –Ω–∞ 3 –º–µ—Å—è—Ü–∞.",
                                    reply_markup=crypto_sub_menu(lvl, dat))
    elif call.data.split('-')[0] == 'six_month':
        lvl = call.data.split('-')[1]
        dat = 6
        print(lvl)
        if lvl == '1':
            name_sub = '¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª'
        elif lvl == '2':
            name_sub = '¬´–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —á–∏—Ç–∞—Ç–µ–ª—å¬ª'
        elif lvl == '3':
            name_sub = '¬´–°–ø–æ–Ω—Å–æ—Ä¬ª'
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f"–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ {name_sub} –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤.",
                                    reply_markup=crypto_sub_menu(lvl, dat))
    elif call.data.split('-')[0] == 'twelve_month':
        lvl = call.data.split('-')[1]
        dat = 12
        print(lvl)
        if lvl == '1':
            name_sub = '¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª'
        elif lvl == '2':
            name_sub = '¬´–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —á–∏—Ç–∞—Ç–µ–ª—å¬ª'
        elif lvl == '3':
            name_sub = '¬´–°–ø–æ–Ω—Å–æ—Ä¬ª'
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f"–í—ã–±–µ—Ä–µ—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ {name_sub} –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤.",
                                    reply_markup=crypto_sub_menu(lvl, dat))
    elif call.data.split('-')[0] == 'yes_asm':
        try:
            lvl = call.data.split('-')[1]
            dat = call.data.split('-')[2]
            await call.message.delete_reply_markup()
            if lvl == '1':
                name_sub = '¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª'
                summ = 20
            elif lvl == '2':
                name_sub = '¬´–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —á–∏—Ç–∞—Ç–µ–ª—å¬ª'
                summ = 50
            elif lvl == '3':
                name_sub = '¬´–°–ø–æ–Ω—Å–æ—Ä¬ª'
                summ = 250
            if dat == '1':
                dat_text = '1 –º–µ—Å—è—Ü'
            elif dat == '3':
                dat_text = '3 –º–µ—Å—è—Ü–∞'
            elif dat == '6':
                dat_text = '6 –º–µ—Å—è—Ü–µ–≤'
            elif dat == '12':
                dat_text = '12 –º–µ—Å—è—Ü–µ–≤'
            currency = call.data.split('-')[3]
            converted_amount = convert_from_usd(summ, 'BTC')
            DB_data = DB.selectDB_wallets(info=(0, currency))
            DB_data2 = DB.selectDB_check_wallets(info=(call.from_user.id,))
            if DB_data2 != []:
                await bot.send_message(call.message.chat.id, f"–í—ã —É–∂–µ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –ø–ª–∞—Ç—ë–∂!")
                return
            DB.updateDB_wallets(info=(1, call.from_user.id, DB_data[0][1]))
            await bot.send_message(call.message.chat.id,
                                   f"<strong>{datetime.strftime(datetime.now(msk), '%d.%m.%Y %H:%M')}</strong>\n\n" \
                                   f"–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ {name_sub} –Ω–∞ {dat_text}.\n\n"
                                   f"<a href='tg://user?id={call.from_user.id}'>{call.from_user.first_name}</a>" \
                                   f", –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <code>{converted_amount}</code> {currency} –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π BTC-–∞–¥—Ä–µ—Å:\n\n<code>{DB_data[0][1]}</code>" \
                                   f"\n\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—Å—Ç—É–ø–∞—é—Ç –≤ —Å–µ—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã —É–≤–∏–¥–∏–º, —á—Ç–æ –í–∞—à –ø–ª–∞—Ç—ë–∂ –¥–æ—à—ë–ª ‚Äî –º—ã —Å—Ä–∞–∑—É –∂–µ –æ—Ç–ø—Ä–∞–≤–∏–º –í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                                   parse_mode='HTML')
            dp.loop.create_task(
                check_transaction(DB_data[0][1], call.from_user.id, converted_amount, currency, name_sub, dat))
        except Exception as e:
            print(e)
            if str(e) == 'list index out of range':
                await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                            text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∂–µ–ª–∞—é—â–∏—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç –∏–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
    elif call.data.split('-')[0] == 'no_asm':
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text=f"–ù–µ—Ç —Ç–∞–∫ –Ω–µ—Ç! –ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω—ë–Ω.")
    elif call.data == 'login_in_bot':
        print("HUY")
        inf = DB.selectDB_users_bot(info=(call.from_user.id,))
        print(inf)
        if not inf:
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —á–∞—Ç" \
                                             f" —á–µ—Ä–µ–∑ –ø–æ–¥–ø–∏—Å–∫—É –±–æ—Ç–∞, –≤–µ–¥—å —É –í–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏! –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã —á–µ—Ä–µ–∑ Patreon.")
