from datetime import timedelta, datetime

from aiogram import types, executor
from aiogram.dispatcher import filters, FSMContext
from aiogram.types import BotCommand, BotCommandScopeAllPrivateChats
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from markupsafe import escape

from buttons import auth_button, main_menu_keyboard, donate_bot, accept_pay, sub_menu
from config import bot, chat_id, admins, db as DB, dp, cents, msk
from crypto_helper import activday2, convert_from_usd
from main import Main
from patreon_helper import client_id, redirect_uri, activday
from states import State_SVTV

main = Main()


def auth(func):
    async def wrapper(message):
        if message.chat.id not in admins:
            return
        return await func(message)

    return wrapper


@dp.message_handler(state='*', commands='cancel')
# @dp.message_handler(equals='cancel', ignore_case=True, state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    if message.chat.type == 'private':
        current_state = await state.get_state()
        if current_state is None:
            return
        await state.finish()
        await message.reply('Cancelled.')
    else:
        current_state = await state.get_state()
        if current_state is None:
            return
        await state.finish()
        await message.reply('Cancelled.')


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!\n\n–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –ª–∏–±–µ—Ä—Ç–∞—Ä–∏–∞–Ω—Å–∫–æ–≥–æ –°–ú–ò <a href='https://t.me/svtvnews'>SVTV NEWS</a> –¥–ª—è —Å–±–æ—Ä–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π.\n\n" \
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ–Ω–∞—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤.", parse_mode='HTML',
        reply_markup=main_menu_keyboard, disable_web_page_preview=True)


@dp.message_handler(text=['üíµ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç'])
async def send_donate(message: types.Message):
    await message.reply(
        f"–ò–∑-–∑–∞ —Å–∞–Ω–∫—Ü–∏–æ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –†–æ—Å—Å–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∑–∞—Ä—É–±–µ–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ –ø—Ä–∏—ë–º—É –ø–ª–∞—Ç–µ–∂–µ–π ‚Äî –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç." \
        f"\n\n–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∫–∞–∫ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å –Ω–∞–º:", reply_markup=donate_bot())


@dp.message_handler(text=['üîê –í–æ–π—Ç–∏ –≤ —á–∞—Ç'])
async def join_chat(message: types.Message):
    # await message.reply(f"–£ –Ω–∞—Å –µ—Å—Ç—å —á–∞—Ç –¥–ª—è –Ω–∞—à–∏—Ö –ø–∞—Ç—Ä–æ–Ω–æ–≤! –í—ã –º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Patreon –ª–∏–±–æ —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n\n–í—Ö–æ–¥ –≤ —á–∞—Ç –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ —Å –Ω–∞–ª–∏—á–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ " \
    # f"¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª –∏ –≤—ã—à–µ.", reply_markup=login_chat(user_id=message.from_user.id))
    user_bot_subs = DB.selectDB_users_bot(info=(message.from_user.id,))
    if user_bot_subs != []:
        await message.reply(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–µ–≥–æ <a href='https://svtv.org'>–°–ú–ò</a>!\n\n"
            f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å <a href='{await main.create_link(message.from_user.first_name)}'>—ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π</a> –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç. "
            f"–û–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 1 —á–∞—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —É –ø–∞—Ç—Ä–æ–Ω–æ–≤.\n\n–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–æ—á–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É!",
            parse_mode='HTML')
        return
    value_whitelist = DB.selectDB_whitelist(message.from_user.id)
    user_sum_crypt = DB.selectDB('sum', 'id_telegram', message.from_user.id)
    if user_sum_crypt:
        user_sum = user_sum_crypt >> 3
        user_cur = [y for x, y in enumerate(cents.keys()) if x == user_sum_crypt & 7][0]
    else:
        user_sum, user_cur = 0, "USD"
    if value_whitelist == message.from_user.id:
        status = await bot.get_chat_member(chat_id, message.from_user.id)
        if status['status'] != 'left' and status['status'] != 'kicked':
            await message.reply(f"–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ –ø–æ –æ—Å–æ–±–æ–º—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é!")
        else:
            await message.reply(
                f"–£ –í–∞—Å –æ—Å–æ–±–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å <a href='{await main.create_link(message.from_user.first_name)}'>—ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π</a> –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç. "
                f"–û–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 1 —á–∞—Å.\n\n–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É!",
                parse_mode='HTML')
    elif DB.selectDB('id_telegram', 'id_telegram', message.from_user.id) != message.from_user.id or user_sum <= 0:
        auth_button.url = f"https://www.patreon.com/oauth2/authorize?response_type=code&client_id={client_id}" \
                          f"&redirect_uri={redirect_uri}&state={message.from_user.id}" \
                          f"&scope=users+pledges-to-me"
        main_menu = types.InlineKeyboardMarkup(inline_keyboard=[[auth_button]])
        await message.reply(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–ø–∞—Å—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –¥–ª—è –ø–∞—Ç—Ä–æ–Ω–æ–≤ <a href='https://svtv.org'>SVTV NEWS</a>.\n\n"
            f"–ù–æ —Å–Ω–∞—á–∞–ª–∞ –í—ã –¥–æ–ª–∂–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞—à–µ–≥–æ <a href='https://svtv.org'>–°–ú–ò</a>. –ï—Å–ª–∏ –í—ã –≤ –†–æ—Å—Å–∏–∏, —Ç–æ " \
            f"–æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ, –æ–ø–ª–∞—Ç–∏–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º!",
            reply_markup=main_menu, parse_mode='HTML')
    elif user_sum >= cents[user_cur]:
        status = await bot.get_chat_member(chat_id, message.from_user.id)
        if status['status'] != 'left' and status['status'] != 'kicked':
            await message.reply(
                f"–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ. –°–ø–∞—Å–∏–±–æ –í–∞–º –±–æ–ª—å—à–æ–µ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–µ–≥–æ <a href='https://svtv.org'>–°–ú–ò</a>!",
                parse_mode='HTML')
        else:
            await message.reply(
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–µ–≥–æ <a href='https://svtv.org'>–°–ú–ò</a>!\n\n"
                f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å <a href='{await main.create_link(message.from_user.first_name)}'>—ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π</a> –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç. "
                f"–û–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 1 —á–∞—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —É –ø–∞—Ç—Ä–æ–Ω–æ–≤.\n\n–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É!",
                parse_mode='HTML')
    elif user_sum < cents[user_cur]:
        await message.reply(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É. –î–æ—Å—Ç—É–ø –≤ —á–∞—Ç –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Ä–æ–≤–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª."
            "\n\nhttp://patreon.com/svtvnews")


@dp.message_handler(text=['üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'])
async def join_chat(message: types.Message):
    await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏", reply_markup=sub_menu())


# @dp.message_handler(commands=['start'])
# async def start(message: types.Message):
# value_whitelist = DB.selectDB_whitelist(message.from_user.id)
# user_sum_crypt = DB.selectDB('sum', 'id_telegram', message.from_user.id)
# if user_sum_crypt:
#     user_sum = user_sum_crypt >> 3
#     user_cur = [y for x, y in enumerate(cents.keys()) if x == user_sum_crypt & 7][0]
# else:
#     user_sum, user_cur = 0, "USD"
# if value_whitelist == message.from_user.id:
#     status = await bot.get_chat_member(chat_id, message.from_user.id)
#     if status['status'] != 'left' and status['status'] != 'kicked':
#         await message.reply(f"–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ –ø–æ –æ—Å–æ–±–æ–º—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é!")
#     else:
#         await message.reply(f"–£ –í–∞—Å –æ—Å–æ–±–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å <a href='{await main.create_link(message.from_user.first_name)}'>—ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π</a> –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç. "
#         f"–û–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 1 —á–∞—Å.\n\n–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É!", parse_mode='HTML')
# elif DB.selectDB('id_telegram', 'id_telegram', message.from_user.id) != message.from_user.id or user_sum <= 0:
#     auth_button.url = f"https://www.patreon.com/oauth2/authorize?response_type=code&client_id={client_id}" \
#                       f"&redirect_uri={redirect_uri}&state={message.from_user.id}" \
#                       f"&scope=users+pledges-to-me"
#     main_menu = types.InlineKeyboardMarkup(inline_keyboard=[[auth_button]])
#     await message.reply(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–ø–∞—Å—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç –¥–ª—è –ø–∞—Ç—Ä–æ–Ω–æ–≤ <a href='https://svtv.org'>SVTV NEWS</a>.\n\n"
#     f"–ù–æ —Å–Ω–∞—á–∞–ª–∞ –í—ã –¥–æ–ª–∂–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞—à–µ–≥–æ <a href='https://svtv.org'>–°–ú–ò</a>.",
#     reply_markup=main_menu, parse_mode='HTML')
# elif user_sum >= cents[user_cur]:
#     status = await bot.get_chat_member(chat_id, message.from_user.id)
#     if status['status'] != 'left' and status['status'] != 'kicked':
#         await message.reply(f"–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ. –°–ø–∞—Å–∏–±–æ –í–∞–º –±–æ–ª—å—à–æ–µ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–µ–≥–æ <a href='https://svtv.org'>–°–ú–ò</a>!", parse_mode='HTML')
#     else:
#         await message.reply(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–µ–≥–æ <a href='https://svtv.org'>–°–ú–ò</a>!\n\n"
#         f"–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å <a href='{await main.create_link(message.from_user.first_name)}'>—ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π</a> –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç. "
#         f"–û–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 1 —á–∞—Å –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —É –ø–∞—Ç—Ä–æ–Ω–æ–≤.\n\n–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É!",
#         parse_mode='HTML')
# elif user_sum < cents[user_cur]:
#     await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É. –î–æ—Å—Ç—É–ø –≤ —á–∞—Ç –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Ä–æ–≤–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ¬´–ß–∏—Ç–∞—Ç–µ–ª—å¬ª."
#     "\n\nhttp://patreon.com/svtvnews")

@dp.message_handler(content_types=['new_chat_members'])
async def join_user_chat(message: types.Message):
    try:
        print(message.new_chat_members[0])
        value_whitelist = DB.selectDB_whitelist(message.new_chat_members[0].id)
        user_sum_crypt = DB.selectDB('sum', 'id_telegram', message.new_chat_members[0].id)
        if user_sum_crypt:
            user_sum = user_sum_crypt >> 3
            user_cur = [y for x, y in enumerate(cents.keys()) if x == user_sum_crypt & 7][0]
        else:
            user_sum, user_cur = 0, "USD"
        if value_whitelist == message.new_chat_members[0].id:
            await message.reply(
                f"–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º <a href='tg://user?id={message.new_chat_members[0].id}'>{message.new_chat_members[0].first_name}</a> –≤ –Ω–∞—à–µ–º —É—é—Ç–Ω–æ–º —á–∞—Ç–∏–∫–µ!",
                parse_mode='HTML')
        elif DB.selectDB('id_telegram', 'id_telegram', message.new_chat_members[0].id) != message.new_chat_members[
            0].id:
            await bot.kick_chat_member(chat_id, message.new_chat_members[0].id, until_date=timedelta(seconds=60))
            await bot.send_message(chat_id,
                                   f"–ö—Ç–æ-—Ç–æ –¥–∞–ª —Å—Å—ã–ª–∫—É –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –Ø —É—Å–ø–µ—à–Ω–æ –≤—ã–≥–Ω–∞–ª –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞!")
        elif user_sum < cents[user_cur]:
            await bot.kick_chat_member(chat_id, message.new_chat_members[0].id, until_date=timedelta(seconds=60))
            await bot.send_message(chat_id,
                                   f"–ö—Ç–æ-—Ç–æ –¥–∞–ª —Å—Å—ã–ª–∫—É –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –Ø —É—Å–ø–µ—à–Ω–æ –≤—ã–≥–Ω–∞–ª –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞!")
        elif user_sum >= cents[user_cur]:
            await message.reply(
                f"–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–∞—Ç—Ä–æ–Ω–∞ <a href='tg://user?id={message.new_chat_members[0].id}'>{message.new_chat_members[0].first_name}</a> –≤ –Ω–∞—à–µ–º —É—é—Ç–Ω–æ–º —á–∞—Ç–∏–∫–µ!",
                parse_mode='HTML')
        elif value_whitelist != message.new_chat_members[0].id:
            await bot.kick_chat_member(chat_id, message.new_chat_members[0].id, until_date=timedelta(seconds=60))
            await bot.send_message(chat_id,
                                   f"–ö—Ç–æ-—Ç–æ –¥–∞–ª —Å—Å—ã–ª–∫—É –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –Ø —É—Å–ø–µ—à–Ω–æ –≤—ã–≥–Ω–∞–ª –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞!")
    except Exception as e:
        main.log(str(e), 'join_user_chat')


@auth
@dp.message_handler(filters.Text(startswith=['/add']))
async def add_whitelist(message: types.Message):
    try:
        id = message.text.split()[1]
        value = DB.whitelistDB_add(id)
        status = await bot.get_chat_member(chat_id, id)
        if value == True:
            await message.reply(
                f"<a href='tg://user?id={id}'>{escape(status['user']['first_name'])}</a> —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ë–µ–ª–æ–º —Å–ø–∏—Å–∫–µ!",
                parse_mode='HTML')
            return
        else:
            DB.whitelistDB_add(id)
            await message.reply(
                f"<a href='tg://user?id={id}'>{escape(status['user']['first_name'])}</a> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –∏ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç!",
                parse_mode='HTML')
    except Exception as e:
        if str(e) == "User not found":
            if value == True:
                await message.reply(f"–Æ–∑–≤–µ—Ä—å —Å –∞–π–¥–∏—à–Ω–∏–∫–æ–º {id} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ë–µ–ª–æ–º —Å–ø–∏—Å–∫–µ!",
                                    parse_mode='HTML')
            else:
                DB.whitelistDB_add(id)
                await message.reply(
                    f"–Æ–∑–≤–µ—Ä—å —Å –∞–π–¥–∏—à–Ω–∏–∫–æ–º {id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –∏ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç!",
                    parse_mode='HTML')
        main.log(str(e), 'add_whitelist')


@dp.message_handler(filters.Text(startswith=['/id']))
async def check_id(message: types.Message):
    try:
        await message.reply(message.chat.id)
        await bot.send_message(399010380, f'HUY')
    except Exception as e:
        main.log(str(e), 'check_id')


@auth
@dp.message_handler(filters.Text(startswith=['/rem']))
async def remove_whitelist(message: types.Message):
    try:
        id = message.text.split()[1]
        status = await bot.get_chat_member(chat_id, id)
        value = DB.selectDB_whitelist(id)
        if value == True:
            await message.reply(
                f"<a href='tg://user?id={id}'>{escape(status['user']['first_name'])}</a> –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ë–µ–ª–æ–º —Å–ø–∏—Å–∫–µ! –ò—Å–∫–ª—é—á–∞—Ç—å –Ω–µ–∫–æ–≥–æ.",
                parse_mode='HTML')
        elif status['status'] != 'left' or status['status'] != 'kicked':
            DB.whitelistDB_remove(id)
            await message.reply(
                f"<a href='tg://user?id={id}'>{escape(status['user']['first_name'])}</a> —É—Å–ø–µ—à–Ω–æ –≤—ã–Ω–µ—Å–µ–Ω –∏–∑ –ë–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞!",
                parse_mode='HTML')
            await bot.unban_chat_member(message.chat.id, id)
            await bot.send_message(chat_id,
                                   f"–ú–Ω–µ –ø—Ä–∏—à–ª–æ—Å—å –≤—ã–≥–Ω–∞—Ç—å <a href='tg://user?id={id}'>{status['user']['first_name']}</a> –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ :(",
                                   parse_mode='HTML')
        else:
            DB.whitelistDB_remove(id)
            await message.reply(
                f"<a href='tg://user?id={id}'>{escape(status['user']['first_name'])}</a> —É—Å–ø–µ—à–Ω–æ –≤—ã–Ω–µ—Å–µ–Ω –∏–∑ –ë–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –∫–∏–∫–Ω—É—Ç –∏–∑ —á–∞—Ç–∞!",
                parse_mode='HTML')
    except Exception as e:
        if str(e) == "User not found":
            if value == True:
                await message.reply(f"–Æ–∑–≤–µ—Ä—è —Å –∞–π–¥–∏—à–Ω–∏–∫–æ–º {id} –Ω–µ—Ç –≤ –ë–µ–ª–æ–º —Å–ø–∏—Å–∫–µ! –ò—Å–∫–ª—é—á–∞—Ç—å –Ω–µ–∫–æ–≥–æ.",
                                    parse_mode='HTML')
            else:
                DB.whitelistDB_remove(id)
                await message.reply(f"–Æ–∑–≤–µ—Ä—å —Å –∞–π–¥–∏—à–Ω–∏–∫–æ–º {id} —É—Å–ø–µ—à–Ω–æ –≤—ã–Ω–µ—Å–µ–Ω –∏–∑ –ë–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –∫–∏–∫–Ω—É—Ç –∏–∑ —á–∞—Ç–∞!",
                                    parse_mode='HTML')
        main.log(str(e), 'remove_whitelist')


@auth
@dp.message_handler(commands="settokens")
async def settokens(message: types.Message):
    auth_button.url = f"https://www.patreon.com/oauth2/authorize?response_type=code&client_id={client_id}" \
                      f"&redirect_uri={redirect_uri}&scope=users+pledges-to-me+my-campaign&state=-{message.from_user.id}"
    main_menu = types.InlineKeyboardMarkup(inline_keyboard=[[auth_button]])
    await message.answer("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∞–ø–∏ –ø–∞—Ç—Ä–µ–æ–Ω–∞. –≠—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–µ –±–æ–π—Å—è...",
                         reply_markup=main_menu)


# @auth
# @dp.message_handler(commands='cancel', state='*')
# async def cancel(message: types.Message, state):
#     await state.finish()
#     await message.answer("–ù–µ —Ö–æ—Ç–∏—Ç–µ ‚Äî –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ!")

@auth
@dp.message_handler(commands="patron4ek")
async def patron4ek(message: types.Message):
    resp = await message.answer("<i>–ü—Ä–æ–≤–µ—Ä—è—é...</i>")
    uids = await activday(hand=True)
    await resp.delete()
    answer = ''
    if uids:
        answer = "\n\n–≠—Ç–∏—Ö –ª—é–¥–∏—à–µ–∫ —è –≤—ã–∫–∏–Ω—É–ª –Ω–∞ –º–æ—Ä–æ–∑ –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
        answer += "\n".join([f'- <a href="tg://user?id={x}">{x}</a>' for x in uids.values()])
    await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞" + answer)


@dp.message_handler(state=State_SVTV.summ_donate)
async def svtv_summ_donate(message: types.Message, state: FSMContext):
    try:
        summ = message.text.split()[0]
        print(summ)
        summ = float(summ)
        print(summ)
        print(type(summ))
        await state.update_data(summ=summ)
        await State_SVTV.comm_state.set()
        await bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –º–∞–∫—Å–∏–º—É–º 600 —Å–∏–º–≤–æ–ª–æ–≤!")
    except Exception as e:
        if str(e)[:34] == 'could not convert string to float:':
            print('–ù–µ —á–∏—Å–ª–æ!')
            return
        main.log(str(e), "svtv_summ_donate")


@dp.message_handler(state=State_SVTV.comm_state)
async def svtv_comm_state(message: types.Message, state: FSMContext):
    try:
        comm = message.text[:600]
        info_state = await state.get_data()
        summ = info_state["summ"]
        currency = info_state["currency"]
        converted_amount = "%f" % convert_from_usd(summ, currency)
        await state.update_data(comment=comm)
        await bot.send_message(message.chat.id,
                               f"<strong>{datetime.strftime(datetime.now(msk), '%d.%m.%Y %H:%M')}</strong>\n\n" \
                               f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>" \
                               f", –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å <strong>{summ}$ ({converted_amount} {currency})</strong> —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º:\n\n¬´{comm}¬ª?",
                               reply_markup=accept_pay(summ, currency), parse_mode='HTML')
    except Exception as e:
        if str(e)[:34] == 'could not convert string to float:':
            print('–ù–µ —á–∏—Å–ª–æ!')
            return await message.answer("–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ, –Ω–æ —Ç–æ–ª—å–∫–æ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        main.log(str(e), "svtv_comm_state")


async def set_commands():
    await dp.bot.set_my_commands(commands=[BotCommand('start', '–°—Ç–∞—Ä—Ç')], scope=BotCommandScopeAllPrivateChats())


async def on_startup(dp):
    try:
        await set_commands()
        scheduler = AsyncIOScheduler(timezone=msk)
        scheduler.add_job(activday, "cron", hour="12", minute="0", day="1")
        scheduler.add_job(activday2, "cron", hour="13", minute="0",
                          day="1")  # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Ö, –∫—Ç–æ –æ—Ñ–æ—Ä–º–ª—è–ª –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–æ—Ç–µ
        scheduler.start()
    except Exception as e:
        main.log(str(e), 'on_startup')


if __name__ == '__main__':
    DB.setupDB()
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
